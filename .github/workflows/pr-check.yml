name: PR Check
on: [pull_request]

jobs:
  init:
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      cache-name: cache-node-modules

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8.14.1
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-

      - name: Install Node Dependencies
        run: pnpm install

      - name: Set .npmrc
        run: echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > packages/auto-story-generator/.npmrc

    # Output the cache-name environment variable
    # so that it can be used in other jobs
    outputs:
      cache-name: ${{ env.cache-name }}

  type-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: init
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - uses: pnpm/action-setup@v2
      - uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-pnpm-store-${{ needs.init.outputs.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Type check
        run: pnpm asg lint:type-check

  eslint-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: init
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - uses: pnpm/action-setup@v2
      - uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-pnpm-store-${{ needs.init.outputs.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: ESlint check
        run: pnpm asg lint

  build-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: init
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - uses: pnpm/action-setup@v2
      - uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-pnpm-store-${{ needs.init.outputs.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Build check
        run: pnpm asg build

  publish-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [init, build-check]
    permissions:
      actions: write
      checks: write
      contents: write
      deployments: write
      issues: write
      packages: write
      pull-requests: write
      repository-projects: write
      security-events: write
      statuses: write
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NODE_OPTIONS: --max_old_space_size=8192

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          registry-url: "https://registry.npmjs.org/"
      - uses: pnpm/action-setup@v2
      - uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-pnpm-store-${{ needs.init.outputs.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Set .npmrc
        run: echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > packages/auto-story-generator/.npmrc
      - name: Build check
        run: pnpm asg build
      - name: Set current datetime as env variable
        id: set-current-datetime
        env:
          TZ: "Asia/Tokyo"
        run: echo "CURRENT_DATETIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
      - name: Publish check
        run: pnpm run publish:pr-check --filter @takuma-ru/auto-story-generator -- --git.pushRepo=release/${{ steps.set-current-datetime.outputs.CURRENT_DATETIME }}

  # success-check:
  #   runs-on: ubuntu-latest
  #   needs: [type-check, eslint-check, build-check, publish-check]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #     - uses: pnpm/action-setup@v2
  #     - uses: actions/cache@v3
  #       with:
  #         path: "**/node_modules"
  #         key: ${{ runner.os }}-pnpm-store-${{ needs.init.outputs.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
  #     - name: Get Current package info
  #       id: get-package-info
  #       run: |
  #         echo "PACKAGE_VERSION=$(node -p "require('./packages/auto-story-generator/package.json').version")" >> $GITHUB_OUTPUT
  #         echo "PACKAGE_NAME=$(node -p "require('./packages/auto-story-generator/package.json').name")" >> $GITHUB_OUTPUT
  #
  #     - name: Success
  #       run: echo "${{ steps.get-package-info.outputs.PACKAGE_NAME }}@${{ steps.get-package-info.outputs.PACKAGE_VERSION }} is ready to be published! ðŸš€"
